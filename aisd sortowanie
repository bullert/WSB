public static int[] BubbleSort(int[] A)
{
    int i, tmp, n = A.Length;
    bool f;
    do
    {
        f = false;
        for (i = 0; i < n - 1; i++)
        {
            if (A[i] > A[i + 1])
            {
                tmp = A[i];
                A[i] = A[i + 1];
                A[i + 1] = tmp;
                f = true;
            }
        }
        n--;
    }
    while (f);

    return A;
}

public static int[] BubbleSort2(int[] A)
{
    int i, j, tmp, n = A.Length;
    for (i = 0; i < n - 1; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (A[i] > A[j])
            {
                tmp = A[i];
                A[i] = A[j];
                A[j] = tmp;
            }
        }
    }

    return A;
}

public static int[] InsertSort(int[] A)
{
    int i, j, tmp, n = A.Length;
    for (i = 0; i < n - 1; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (A[i] > A[j])
            {
                tmp = A[i];
                A[i] = A[j];
                A[j] = tmp;
            }
        }
    }

    return A;
}

public static int[] QuickSort(int[] A)
{
    SortRange(A, 0, A.Length - 1);

    int[] SortRange(int[] Ar, int p, int q)
    {
        int i, j, v, tmp;
        i = p; j = q; v = A[(p + q) / 2];
        do
        {
            while (A[i] < v) i++;
            while (A[j] > v) j--;
            if (i <= j)
            {
                tmp = A[i];
                A[i] = A[j];
                A[j] = tmp;
                i++;
                j--;
            }
        }
        while (i < j);
        if (j > p) SortRange(A, p, j);
        if (i < q) SortRange(A, i, q);

        return A;
    }

    return A;
}
